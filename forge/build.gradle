
architectury {
    platformSetupLoomIde()
    forge()
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "map_atlases-common.mixins.json"
        mixinConfig "map_atlases.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}


processResources {
    // input variables of this task:
    var replaceProperties = [
            minecraft_version    : minecraft_version,
            minecraft_min_version: minecraft_min_version,
            minecraft_max_version: minecraft_max_version,
            pack_format_number   : pack_format_number,

            mod_id               : mod_id,
            mod_name             : mod_name,
            mod_version          : mod_version,
            mod_license          : mod_license,
            mod_authors          : mod_authors,
            mod_description      : mod_description,
            mod_credits          : mod_credits,
            mod_homepage         : mod_homepage,
            mod_github           : mod_github,

            neo_version_range    : neo_version_range,
            loader_version_range : loader_version_range,

            required_moonlight_version: required_moonlight_version,
            cca_version: cca_version
    ]
    // setting them as input
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', 'update.json']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"

    zip64 = true
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}



jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}



// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    implementation 'org.jetbrains:annotations:22.0.0'

    modImplementation("net.mehvahdjukaar:moonlight-forge:${rootProject.moonlight_version}")

    //modImplementation("net.mehvahdjukaar:supplementaries:${rootProject.supplementaries_version}")

    modCompileOnly("curse.maven:supplementaries-412082:5066761")
    modCompileOnly("curse.maven:config-menus-forge-544048:4672356")
    modCompileOnly("curse.maven:the-twilight-forest-227639:4802174")
    modCompileOnly("curse.maven:spark-361579:4738952")

    modCompileOnly("maven.modrinth:immediatelyfast:1.2.10+1.19.2-forge")
    modCompileOnly("curse.maven:modernfix-790626:4599348")
    modCompileOnly("curse.maven:supplementaries-412082:5068910")

    modCompileOnly("curse.maven:jei-238222:3928388")
    modCompileOnly("curse.maven:configured-457570:4462894")

    modCompileOnly("curse.maven:curios-309927:4581099")

    modCompileOnly("curse.maven:balm-531761:4757228")
    modCompileOnly("curse.maven:waystones-245755:4749833")


    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

    // modImplementation ("curse.maven:texture-dump-319039:3573998")
}
